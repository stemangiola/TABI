box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
sigmoidal_sim_df(
n_true_tests = 5,
n_false_tests = 0,
beta = 2,
k = 8,
A = 3,
sample_size = 11,
disp_size = 0.85,
alpha = "all",
x_cord =  seq(from = -2.5, to = 2.5, by = 0.5))
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
sigmoidal_sim_df(
n_true_tests = 5,
n_false_tests = 0,
beta = 2,
k = 8,
A = 3,
sample_size = 11,
disp_size = 0.85,
alpha = "all",
x_cord =  seq(from = -2.5, to = 2.5, by = 0.5))
box::reload()
box::reload(Article_Sections)
box::reload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
box::reload(./Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
box::reload(./Functions_Simulated_Sigmoid_df_RNAseq)
box::unload()
box::unload(./Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
box::unload(./Functions_Simulated_Sigmoid_df_RNAseq)
box::unload(.Functions_Simulated_Sigmoid_df_RNAseq)
box::unload(Functions_Simulated_Sigmoid_df_RNAseq)
box::unload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
box::name()
box::name('sigmoidal_sim_df')
box::name(sigmoidal_sim_df)
box::reload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::unload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::reload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::use(./Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/")
box::use(./Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev")
box::use(./Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/")
options(box.path)
options('box.path')
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Article_Sections")
box::use(./Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
options('box.path')
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Article_Sections")
box::use(/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::use(Functions_Simulated_Sigmoid_df_RNAseq[...])
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev")
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
ls()
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::help(Functions)Simulated_Sigmoid_df_RNAseq)
box::help(Functions_Simulated_Sigmoid_df_RNAseq)
box::help(Functions_Simulated_Sigmoid_df_RNAseq$sigmoidal_sim_df)
box::unload(Functions_Simulated_Sigmoid_df_RNAseq$sigmoidal_sim_df)
box::unload(Functions_Simulated_Sigmoid_df_RNAseq)
box::unload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
box::unload()
box::unload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
box::use(.dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
ls()
detach()
detach()
box::detach()
search()
box::unload(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
search()
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev")
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
ls()
ls()
ls()
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq_mod[...])
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq_mod[...])
ls()
ls()
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev")
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
# Load functions from Functions_Simulated_Sigmoid_df_RNAseq using box
options(box.path = "/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/")
box::use(Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq[...])
ls()
#' @export
source('/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Article_Sections/__init__.R')
#' @export
box::use(./dev/Functions_Simulated_Sigmoid_df_RNAseq)
#' @export
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
source('/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq.R')
source('/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq.R')
#' @export
box::use(./dev/Article_Sections/Functions_Simulated_Sigmoid_df_RNAseq)
ls()
View(Functions_Simulated_Sigmoid_df_RNAseq)
par_vector= expand.grid(c(0.25, -0.25, 0.5, -0.5, 1, -1, 3, -3),
c(11,22,55, 77))
library(furrr)
plan(multisession, workers = 15)
sim_df_slopes_sample_size = furrr::future_pmap_dfr(.l = par_vector,
.f = ~sigmoidal_sim_df(
n_true_tests = 5,
n_false_tests = 0,
beta = .x,
k = 8,
A = 3,
sample_size = .y,
disp_size = 0.85,
alpha = "all",
x_cord =  seq(from = -2.5, to = 2.5, by = 0.5)),
.progress = TRUE)
sigmoidal_sim_df(
n_true_tests = 5,
n_false_tests = 0,
beta = 2,
k = 8,
A = 3,
sample_size = 11,
disp_size = 0.85,
alpha = "all",
x_cord =  seq(from = -2.5, to = 2.5, by = 0.5))
sim_df_slopes_sample_size = furrr::future_pmap_dfr(.l = par_vector,
.f = ~sigmoidal_sim_df(
n_true_tests = 5,
n_false_tests = 0,
beta = .x,
k = 8,
A = 3,
sample_size = .y,
disp_size = 0.85,
alpha = "all",
x_cord =  seq(from = -2.5, to = 2.5, by = 0.5)),
.progress = TRUE)
sim_df_slopes_sample_size = furrr::future_pmap_dfr(.l = par_vector,
.f = ~sigmoidal_sim_df(
n_true_tests = 5,
n_false_tests = 0,
beta = ...1,
k = 8,
A = 3,
sample_size = ...2,
disp_size = 0.85,
alpha = "all",
x_cord =  seq(from = -2.5, to = 2.5, by = 0.5)),
.progress = TRUE)
remove.packages(box)
fit_table_purity_complete <- readRDS("/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/fit_table_purity_complete.rds")
non_zero_slope_genes<- fit_table_purity_complete %>%
filter(parameters == "beta[2,1]") %>%
filter(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0) %>% #Selecting either all > 0 for 95% interval / or all < 0
select(Gene_name) #Which genes
library(dplyr)
non_zero_slope_genes<- fit_table_purity_complete %>%
filter(parameters == "beta[2,1]") %>%
filter(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0) %>% #Selecting either all > 0 for 95% interval / or all < 0
select(Gene_name) #Which genes
fit_table_purity_complete_sig <-inner_join(non_zero_slope_genes, fit_table_purity_complete)
fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
theme(text = element_text(size=10), legend.position="bottom")
library(ggplot2)
fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
custom_theme
library(tidyr)
fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
custom_theme
non_zero_slope_genes<- fit_table_purity_complete %>%
filter(parameters == "beta[2,1]") %>%
filter(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0) %>% #Selecting either all > 0 for 95% interval / or all < 0
select(Gene_name) #Which genes
fit_table_purity_complete_sig <-inner_join(non_zero_slope_genes, fit_table_purity_complete)
fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean_value, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean_value) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
custom_theme
fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
custom_theme
custom_theme <-
list(
theme_bw() +
theme(
panel.border = element_blank(),
axis.line = element_line(),
text = element_text(size = 9),
legend.position = "bottom",
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
)
)
fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
custom_theme
load("/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Linear_group_GO_results.csv")
read.csv("/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Linear_group_GO_results.csv")
read.csv("/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Linear_group_GO_results.csv")
Linear_group_GO_results <-read.csv("/stornext/Home/data/allstaff/b/beasley.i/TABI/dev/Linear_group_GO_results.csv")
box::use(dplyr[...],
tidyr['seperate'],
ComplexHeatmap[...],
simplifyEnrichment[...])
box::use(dplyr[...],
tidyr['seperate'],
ComplexHeatmap[...],
simplifyEnrichment[...])
box::use(dplyr[...],
ComplexHeatmap[...],
simplifyEnrichment[...])
# Filter Panther GO Enrichment Results by Stage (Early) and Direction of Change (Increase)
GO_ID_ear_up= Linear_group_GO_results %>%
filter(
Direction_of_Expression_Change == "Increase"&Region_of_Change == "Early") %>%
select(Gene_Function_Set)  %>%
tidyr::separate(col = Gene_Function_Set,
into = c(NA, "GO_ID"),
sep = "[()]")
#
Q1 = GO_similarity(GO_ID_ear_up$GO_ID)
# Set up complex heatmap options
# Adding black borders / setting font size
ht_opt(
heatmap_column_names_gp = gpar(fontface = "italic"),
heatmap_column_title_gp = gpar(fontsize = 24),
legend_border = "black",
heatmap_border = "black",
annotation_border = "black")
# Setting range of colours for word cloud in heatmap
col_fun = colorRamp2(c(8, 12, 16),
viridis(n = 4)[1:3])
plot_q1 = grid.grabExpr(ht_clusters(Q1,
cluster_terms(Q1),
column_title = "Early Increase",
order_by_size = TRUE,
col = magma(n = 50),
dend = TRUE,
depth = 1,
word_cloud_grob_param = list(
col = function(fs) col_fun(fs)),
fontsize_range = c(8, 16)))
GO_ID_ear_dec= Linear_group_GO_results %>%
filter(
Direction_of_Expression_Change == "Decrease"&Region_of_Change == "Early") %>%
select(Gene_Function_Set)  %>%
tidyr::separate(col = Gene_Function_Set,
into = c(NA, "GO_ID"),
sep = "[()]")
Q2 = GO_similarity(GO_ID_ear_dec$GO_ID)
plot_q2 = grid.grabExpr(ht_clusters(Q2,
cluster_terms(Q2),
column_title = "Early Decrease",
order_by_size = TRUE,
col = magma(n = 50),
word_cloud_grob_param = list(
col = function(fs) col_fun(fs)),
fontsize_range = c(8, 16)))
GO_ID_late_up= Linear_group_GO_results %>%
filter(
Direction_of_Expression_Change == "Increase"&Region_of_Change == "Late") %>%
select(Gene_Function_Set)  %>%
tidyr::separate(col = Gene_Function_Set,
into = c(NA, "GO_ID"),
sep = "[()]")
Q3 = GO_similarity(GO_ID_late_up$GO_ID)
plot_q3 = grid.grabExpr(ht_clusters(Q3,
cluster_terms(Q3),
column_title = "Late Increase",
order_by_size = TRUE,
col = magma(n = 50),
word_cloud_grob_param = list(
col = function(fs) col_fun(fs)),
fontsize_range = c(8, 16)))
GO_ID_late_up= Linear_group_GO_results %>%
filter(
Direction_of_Expression_Change == "Decrease"&Region_of_Change == "Late") %>%
select(Gene_Function_Set)  %>%
tidyr::separate(col = Gene_Function_Set,
into = c(NA, "GO_ID"),
sep = "[()]")
Q4 = GO_similarity(GO_ID_late_dec$GO_ID)
plot_q4 = grid.grabExpr(ht_clusters(Q4,
cluster_terms(Q4),
column_title = "Late Decrease",
order_by_size = TRUE,
col = magma(n = 50),
word_cloud_grob_param = list(
col = function(fs) col_fun(fs)),
fontsize_range = c(8, 16)))
ggarrange(plot_q1,
plot_q3,
plot_q2,
plot_q4,
ncol = 2,
nrow = 2)
inflection_plot<-fit_table_purity_complete %>% #Data Table of sig fit data
mutate(Slope_significance = ifelse(`2.5%`<0&`97.5%`<0|`2.5%`>0&`97.5%`>0, "Significant (n=3695)", "Non-Significant (n=31167)")) %>%
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name, Slope_significance) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")%>%
ggplot(aes(x=Inflection_mean, y= Slope_mean, color=Slope_significance)) +
geom_point(alpha=0.7) +
scale_color_manual(name = "", values = c("Significant (n=3695)" = "dodgerblue","Non-Significant (n=31167)"= "black")) +
geom_point(col="black", alpha=0.7) +
geom_point(aes(x=Inflection_mean, y= Slope_mean), alpha=0.7, col="dodgerblue", data = fit_table_purity_complete_sig %>% #Data Table of sig fit data
filter(parameters == "beta[2,1]"|parameters == "inflection[1]") %>% #Select required parameters
select(parameters, mean, Gene_name) %>%
filter(!Gene_name == "TUBBP10") %>% #Two different val for TUBP10 / possible dup?
pivot_wider(names_from = parameters, values_from = mean) %>% #Reshape table for plotting
rename(Inflection_mean="inflection[1]", Slope_mean ="beta[2,1]")) +
stat_smooth(se = FALSE, method = 'lm', col="red") + #Plot fitted linear eq
labs(title = "Fig 2. TABI Calculated Slope mean vs Inflection mean",
y="Calculated Slope Mean",
x="Calculated Inflection Mean",
caption ="Each point represents a single gene analysed by TABI (n = 34862)") +
custom_theme
ggarrange(plot_q1,
plot_q3,
plot_q2,
plot_q4,
ncol = 2,
nrow = 2)
library(ggpubr)
ggarrange(plot_q1,
plot_q3,
plot_q2,
plot_q4,
ncol = 2,
nrow = 2)
# Set up complex heatmap options
# Adding black borders / setting font size
ht_opt(
heatmap_column_names_gp = gpar(fontface = "italic"),
heatmap_column_title_gp = gpar(fontsize = 24),
legend_border = "black",
heatmap_border = "black",
annotation_border = "black")
library(ComplexHeatmap)
# Set up complex heatmap options
# Adding black borders / setting font size
ht_opt(
heatmap_column_names_gp = gpar(fontface = "italic"),
heatmap_column_title_gp = gpar(fontsize = 24),
legend_border = "black",
heatmap_border = "black",
annotation_border = "black")
# Setting range of colours for word cloud in heatmap
col_fun = colorRamp2(c(8, 12, 16),
viridis(n = 4)[1:3])
??colorRamp2
library(circlize)
# Setting range of colours for word cloud in heatmap
col_fun = colorRamp2(c(8, 12, 16),
viridis(n = 4)[1:3])
library(viridis)
# Setting range of colours for word cloud in heatmap
col_fun = colorRamp2(c(8, 12, 16),
viridis(n = 4)[1:3])
plot_q1 = grid.grabExpr(ht_clusters(Q1,
cluster_terms(Q1),
column_title = "Early Increase",
order_by_size = TRUE,
col = magma(n = 50),
dend = TRUE,
depth = 1,
word_cloud_grob_param = list(
col = function(fs) col_fun(fs)),
fontsize_range = c(8, 16)))
library(magick)
library(magick)
library(dplyr)
