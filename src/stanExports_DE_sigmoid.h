// Generated by rstantools.  Do not edit by hand.

/*
    TABI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TABI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TABI.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_DE_sigmoid_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_DE_sigmoid");
    reader.add_event(180, 178, "end", "model_DE_sigmoid");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
log_gen_inv_logit(const Eigen::Matrix<T0__, 1, Eigen::Dynamic>& y_log,
                      const Eigen::Matrix<T1__, 1, Eigen::Dynamic>& b0,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& log_y_cross, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(log_y_cross, log1p_exp(minus(to_vector(b0)))), log1p_exp(minus(to_vector(y_log)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct log_gen_inv_logit_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, 1, Eigen::Dynamic>& y_log,
                      const Eigen::Matrix<T1__, 1, Eigen::Dynamic>& b0,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& log_y_cross, std::ostream* pstream__) const {
        return log_gen_inv_logit(y_log, b0, log_y_cross, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gamma_log_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_log,
                   const T1__& a,
                   const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        validate_non_negative_index("jacob", "rows(x_log)", rows(x_log));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> jacob(rows(x_log));
        stan::math::initialize(jacob, DUMMY_VAR__);
        stan::math::fill(jacob, DUMMY_VAR__);
        stan::math::assign(jacob,x_log);
        current_statement_begin__ = 10;
        local_scalar_t__ norm_constant(DUMMY_VAR__);
        (void) norm_constant;  // dummy to suppress unused var warning
        stan::math::initialize(norm_constant, DUMMY_VAR__);
        stan::math::fill(norm_constant, DUMMY_VAR__);
        stan::math::assign(norm_constant,((a * stan::math::log(b)) - stan::math::lgamma(a)));
        current_statement_begin__ = 11;
        local_scalar_t__ a_minus_1(DUMMY_VAR__);
        (void) a_minus_1;  // dummy to suppress unused var warning
        stan::math::initialize(a_minus_1, DUMMY_VAR__);
        stan::math::fill(a_minus_1, DUMMY_VAR__);
        stan::math::assign(a_minus_1,(a - 1));
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((sum(jacob) + (norm_constant * rows(x_log))) + sum(subtract(multiply(x_log, a_minus_1), multiply(stan::math::exp(x_log), b)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gamma_log_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_log,
                   const T1__& a,
                   const T2__& b, std::ostream* pstream__) {
    return gamma_log_lpdf<false>(x_log,a,b, pstream__);
}
struct gamma_log_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_log,
                   const T1__& a,
                   const T2__& b, std::ostream* pstream__) const {
        return gamma_log_lpdf(x_log, a, b, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, 1>
reg_horseshoe(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& zb,
                  const T1__& aux1_global,
                  const T2__& aux2_global,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& aux1_local,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& aux2_local,
                  const T5__& caux,
                  const T6__& scale_global,
                  const T7__& slab_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 26;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(zb));
        current_statement_begin__ = 29;
        local_scalar_t__ tau(DUMMY_VAR__);
        (void) tau;  // dummy to suppress unused var warning
        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau, DUMMY_VAR__);
        current_statement_begin__ = 30;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda(K);
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        current_statement_begin__ = 31;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_tilde(K);
        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde, DUMMY_VAR__);
        current_statement_begin__ = 32;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        current_statement_begin__ = 35;
        stan::math::assign(lambda, elt_multiply(aux1_local, stan::math::sqrt(aux2_local)));
        current_statement_begin__ = 36;
        stan::math::assign(tau, (((aux1_global * stan::math::sqrt(aux2_global)) * scale_global) * 1));
        current_statement_begin__ = 37;
        stan::math::assign(c, (slab_scale * stan::math::sqrt(caux)));
        current_statement_begin__ = 38;
        stan::math::assign(lambda_tilde, stan::math::sqrt(elt_divide(multiply(pow(c, 2), square(lambda)), add(pow(c, 2), multiply(pow(tau, 2), square(lambda))))));
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(zb, lambda_tilde), tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct reg_horseshoe_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& zb,
                  const T1__& aux1_global,
                  const T2__& aux2_global,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& aux1_local,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& aux2_local,
                  const T5__& caux,
                  const T6__& scale_global,
                  const T7__& slab_scale, std::ostream* pstream__) const {
        return reg_horseshoe(zb, aux1_global, aux2_global, aux1_local, aux2_local, caux, scale_global, slab_scale, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
gen_inv_logit_overdispersion(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                                 const T1__& k, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 44;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_divide(k, add(1, stan::math::exp(minus(y)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gen_inv_logit_overdispersion_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                                 const T1__& k, std::ostream* pstream__) const {
        return gen_inv_logit_overdispersion(y, k, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_DE_sigmoid : public prob_grad {
private:
        int prior_only;
        int G;
        int T;
        int R_1;
        std::vector<std::vector<int> > y;
        matrix_d X;
        std::vector<int> exposure;
        double par_ratio;
        double nu_global;
        double nu_local;
        double slab_scale;
        double slab_df;
        double scale_global;
public:
    model_DE_sigmoid(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_DE_sigmoid(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_DE_sigmoid_namespace::model_DE_sigmoid";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "prior_only", "int", context__.to_vec());
            prior_only = int(0);
            vals_i__ = context__.vals_i("prior_only");
            pos__ = 0;
            prior_only = vals_i__[pos__++];
            check_greater_or_equal(function__, "prior_only", prior_only, 0);
            check_less_or_equal(function__, "prior_only", prior_only, 1);
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 0);
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 0);
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "R_1", "int", context__.to_vec());
            R_1 = int(0);
            vals_i__ = context__.vals_i("R_1");
            pos__ = 0;
            R_1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "R_1", R_1, 0);
            current_statement_begin__ = 55;
            validate_non_negative_index("y", "T", T);
            validate_non_negative_index("y", "G", G);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(T,G));
            y = std::vector<std::vector<int> >(T, std::vector<int>(G, int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = T;
            size_t y_k_1_max__ = G;
            for (size_t k_1__ = 0; k_1__ < y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t y_i_0_max__ = T;
            size_t y_i_1_max__ = G;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < y_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "y[i_0__][i_1__]", y[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("X", "T", T);
            validate_non_negative_index("X", "(R_1 + 1)", (R_1 + 1));
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(T,(R_1 + 1)));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T, (R_1 + 1));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = (R_1 + 1);
            size_t X_j_1_max__ = T;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("exposure", "T", T);
            context__.validate_dims("data initialization", "exposure", "int", context__.to_vec(T));
            exposure = std::vector<int>(T, int(0));
            vals_i__ = context__.vals_i("exposure");
            pos__ = 0;
            size_t exposure_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < exposure_k_0_max__; ++k_0__) {
                exposure[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "par_ratio", "double", context__.to_vec());
            par_ratio = double(0);
            vals_r__ = context__.vals_r("par_ratio");
            pos__ = 0;
            par_ratio = vals_r__[pos__++];
            check_greater_or_equal(function__, "par_ratio", par_ratio, 0);
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "nu_global", "double", context__.to_vec());
            nu_global = double(0);
            vals_r__ = context__.vals_r("nu_global");
            pos__ = 0;
            nu_global = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_global", nu_global, 1);
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "nu_local", "double", context__.to_vec());
            nu_local = double(0);
            vals_r__ = context__.vals_r("nu_local");
            pos__ = 0;
            nu_local = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_local", nu_local, 1);
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "slab_scale", "double", context__.to_vec());
            slab_scale = double(0);
            vals_r__ = context__.vals_r("slab_scale");
            pos__ = 0;
            slab_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "slab_scale", slab_scale, 0);
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "slab_df", "double", context__.to_vec());
            slab_df = double(0);
            vals_r__ = context__.vals_r("slab_df");
            pos__ = 0;
            slab_df = vals_r__[pos__++];
            check_greater_or_equal(function__, "slab_df", slab_df, 0);
            // initialize transformed data variables
            current_statement_begin__ = 69;
            scale_global = double(0);
            stan::math::fill(scale_global, DUMMY_VAR__);
            stan::math::assign(scale_global,(par_ratio / stan::math::sqrt((1.0 * T))));
            // execute transformed data statements
            // validate transformed data
            current_statement_begin__ = 69;
            check_greater_or_equal(function__, "scale_global", scale_global, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 82;
            validate_non_negative_index("inflection", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 83;
            validate_non_negative_index("log_y_cross", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 84;
            validate_non_negative_index("log_y_cross_prior", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 85;
            validate_non_negative_index("beta1_z", "G", G);
            validate_non_negative_index("beta1_z", "R_1", R_1);
            num_params_r__ += (G * R_1);
            current_statement_begin__ = 86;
            validate_non_negative_index("normalization", "T", T);
            num_params_r__ += T;
            current_statement_begin__ = 89;
            num_params_r__ += 1;
            current_statement_begin__ = 90;
            num_params_r__ += 1;
            current_statement_begin__ = 91;
            num_params_r__ += 1;
            current_statement_begin__ = 94;
            validate_non_negative_index("aux1_local", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 95;
            validate_non_negative_index("aux2_local", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 96;
            num_params_r__ += 1;
            current_statement_begin__ = 97;
            num_params_r__ += 1;
            current_statement_begin__ = 98;
            num_params_r__ += 1;
            current_statement_begin__ = 101;
            validate_non_negative_index("non_sparse_sigma", "(R_1 - 1)", (R_1 - 1));
            num_params_r__ += (R_1 - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_DE_sigmoid() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 82;
        if (!(context__.contains_r("inflection")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inflection missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inflection");
        pos__ = 0U;
        validate_non_negative_index("inflection", "G", G);
        context__.validate_dims("parameter initialization", "inflection", "row_vector_d", context__.to_vec(G));
        Eigen::Matrix<double, 1, Eigen::Dynamic> inflection(G);
        size_t inflection_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < inflection_j_1_max__; ++j_1__) {
            inflection(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(inflection);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inflection: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 83;
        if (!(context__.contains_r("log_y_cross")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_y_cross missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_y_cross");
        pos__ = 0U;
        validate_non_negative_index("log_y_cross", "G", G);
        context__.validate_dims("parameter initialization", "log_y_cross", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_y_cross(G);
        size_t log_y_cross_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < log_y_cross_j_1_max__; ++j_1__) {
            log_y_cross(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log_y_cross);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_y_cross: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 84;
        if (!(context__.contains_r("log_y_cross_prior")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_y_cross_prior missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_y_cross_prior");
        pos__ = 0U;
        validate_non_negative_index("log_y_cross_prior", "2", 2);
        context__.validate_dims("parameter initialization", "log_y_cross_prior", "double", context__.to_vec(2));
        std::vector<double> log_y_cross_prior(2, double(0));
        size_t log_y_cross_prior_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < log_y_cross_prior_k_0_max__; ++k_0__) {
            log_y_cross_prior[k_0__] = vals_r__[pos__++];
        }
        size_t log_y_cross_prior_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < log_y_cross_prior_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, log_y_cross_prior[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_y_cross_prior: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 85;
        if (!(context__.contains_r("beta1_z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta1_z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta1_z");
        pos__ = 0U;
        validate_non_negative_index("beta1_z", "G", G);
        validate_non_negative_index("beta1_z", "R_1", R_1);
        context__.validate_dims("parameter initialization", "beta1_z", "vector_d", context__.to_vec(R_1,G));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta1_z(R_1, Eigen::Matrix<double, Eigen::Dynamic, 1>(G));
        size_t beta1_z_j_1_max__ = G;
        size_t beta1_z_k_0_max__ = R_1;
        for (size_t j_1__ = 0; j_1__ < beta1_z_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta1_z_k_0_max__; ++k_0__) {
                beta1_z[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta1_z_i_0_max__ = R_1;
        for (size_t i_0__ = 0; i_0__ < beta1_z_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(beta1_z[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta1_z: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 86;
        if (!(context__.contains_r("normalization")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable normalization missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("normalization");
        pos__ = 0U;
        validate_non_negative_index("normalization", "T", T);
        context__.validate_dims("parameter initialization", "normalization", "vector_d", context__.to_vec(T));
        Eigen::Matrix<double, Eigen::Dynamic, 1> normalization(T);
        size_t normalization_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < normalization_j_1_max__; ++j_1__) {
            normalization(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(normalization);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable normalization: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 89;
        if (!(context__.contains_r("od_inflection")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable od_inflection missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("od_inflection");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "od_inflection", "double", context__.to_vec());
        double od_inflection(0);
        od_inflection = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, od_inflection);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable od_inflection: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 90;
        if (!(context__.contains_r("od1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable od1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("od1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "od1", "double", context__.to_vec());
        double od1(0);
        od1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, od1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable od1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 91;
        if (!(context__.contains_r("od_k")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable od_k missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("od_k");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "od_k", "double", context__.to_vec());
        double od_k(0);
        od_k = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, od_k);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable od_k: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 94;
        if (!(context__.contains_r("aux1_local")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_local missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_local");
        pos__ = 0U;
        validate_non_negative_index("aux1_local", "G", G);
        context__.validate_dims("parameter initialization", "aux1_local", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_local(G);
        size_t aux1_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            aux1_local(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux1_local);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_local: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 95;
        if (!(context__.contains_r("aux2_local")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_local missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_local");
        pos__ = 0U;
        validate_non_negative_index("aux2_local", "G", G);
        context__.validate_dims("parameter initialization", "aux2_local", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_local(G);
        size_t aux2_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            aux2_local(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux2_local);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_local: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 96;
        if (!(context__.contains_r("aux1_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_global");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "aux1_global", "double", context__.to_vec());
        double aux1_global(0);
        aux1_global = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, aux1_global);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_global: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("aux2_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_global");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "aux2_global", "double", context__.to_vec());
        double aux2_global(0);
        aux2_global = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, aux2_global);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_global: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 98;
        if (!(context__.contains_r("caux")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable caux missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("caux");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "caux", "double", context__.to_vec());
        double caux(0);
        caux = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, caux);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable caux: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 101;
        if (!(context__.contains_r("non_sparse_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable non_sparse_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("non_sparse_sigma");
        pos__ = 0U;
        validate_non_negative_index("non_sparse_sigma", "(R_1 - 1)", (R_1 - 1));
        context__.validate_dims("parameter initialization", "non_sparse_sigma", "vector_d", context__.to_vec((R_1 - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> non_sparse_sigma((R_1 - 1));
        size_t non_sparse_sigma_j_1_max__ = (R_1 - 1);
        for (size_t j_1__ = 0; j_1__ < non_sparse_sigma_j_1_max__; ++j_1__) {
            non_sparse_sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, non_sparse_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable non_sparse_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 82;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> inflection;
            (void) inflection;  // dummy to suppress unused var warning
            if (jacobian__)
                inflection = in__.row_vector_constrain(G, lp__);
            else
                inflection = in__.row_vector_constrain(G);
            current_statement_begin__ = 83;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_y_cross;
            (void) log_y_cross;  // dummy to suppress unused var warning
            if (jacobian__)
                log_y_cross = in__.vector_constrain(G, lp__);
            else
                log_y_cross = in__.vector_constrain(G);
            current_statement_begin__ = 84;
            std::vector<local_scalar_t__> log_y_cross_prior;
            size_t log_y_cross_prior_d_0_max__ = 2;
            log_y_cross_prior.reserve(log_y_cross_prior_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log_y_cross_prior_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log_y_cross_prior.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    log_y_cross_prior.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 85;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta1_z;
            size_t beta1_z_d_0_max__ = R_1;
            beta1_z.reserve(beta1_z_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta1_z_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta1_z.push_back(in__.vector_constrain(G, lp__));
                else
                    beta1_z.push_back(in__.vector_constrain(G));
            }
            current_statement_begin__ = 86;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> normalization;
            (void) normalization;  // dummy to suppress unused var warning
            if (jacobian__)
                normalization = in__.vector_constrain(T, lp__);
            else
                normalization = in__.vector_constrain(T);
            current_statement_begin__ = 89;
            local_scalar_t__ od_inflection;
            (void) od_inflection;  // dummy to suppress unused var warning
            if (jacobian__)
                od_inflection = in__.scalar_lb_constrain(0, lp__);
            else
                od_inflection = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 90;
            local_scalar_t__ od1;
            (void) od1;  // dummy to suppress unused var warning
            if (jacobian__)
                od1 = in__.scalar_lb_constrain(0, lp__);
            else
                od1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 91;
            local_scalar_t__ od_k;
            (void) od_k;  // dummy to suppress unused var warning
            if (jacobian__)
                od_k = in__.scalar_lb_constrain(0, lp__);
            else
                od_k = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 94;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux1_local;
            (void) aux1_local;  // dummy to suppress unused var warning
            if (jacobian__)
                aux1_local = in__.vector_lb_constrain(0, G, lp__);
            else
                aux1_local = in__.vector_lb_constrain(0, G);
            current_statement_begin__ = 95;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux2_local;
            (void) aux2_local;  // dummy to suppress unused var warning
            if (jacobian__)
                aux2_local = in__.vector_lb_constrain(0, G, lp__);
            else
                aux2_local = in__.vector_lb_constrain(0, G);
            current_statement_begin__ = 96;
            local_scalar_t__ aux1_global;
            (void) aux1_global;  // dummy to suppress unused var warning
            if (jacobian__)
                aux1_global = in__.scalar_lb_constrain(0, lp__);
            else
                aux1_global = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 97;
            local_scalar_t__ aux2_global;
            (void) aux2_global;  // dummy to suppress unused var warning
            if (jacobian__)
                aux2_global = in__.scalar_lb_constrain(0, lp__);
            else
                aux2_global = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 98;
            local_scalar_t__ caux;
            (void) caux;  // dummy to suppress unused var warning
            if (jacobian__)
                caux = in__.scalar_lb_constrain(0, lp__);
            else
                caux = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 101;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> non_sparse_sigma;
            (void) non_sparse_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                non_sparse_sigma = in__.vector_lb_constrain(0, (R_1 - 1), lp__);
            else
                non_sparse_sigma = in__.vector_lb_constrain(0, (R_1 - 1));
            // transformed parameters
            current_statement_begin__ = 107;
            validate_non_negative_index("beta", "(R_1 + 1)", (R_1 + 1));
            validate_non_negative_index("beta", "G", G);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta((R_1 + 1), G);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("y_hat", "G", G);
            validate_non_negative_index("y_hat", "T", T);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > y_hat(T, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(G));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 109;
            validate_non_negative_index("overdispersion", "G", G);
            validate_non_negative_index("overdispersion", "T", T);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > overdispersion(T, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(G));
            stan::math::initialize(overdispersion, DUMMY_VAR__);
            stan::math::fill(overdispersion, DUMMY_VAR__);
            current_statement_begin__ = 110;
            local_scalar_t__ od0;
            (void) od0;  // dummy to suppress unused var warning
            stan::math::initialize(od0, DUMMY_VAR__);
            stan::math::fill(od0, DUMMY_VAR__);
            stan::math::assign(od0,(-(od_inflection) * od1));
            // transformed parameters block statements
            current_statement_begin__ = 113;
            stan::model::assign(beta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        to_row_vector(reg_horseshoe(get_base1(beta1_z, 1, "beta1_z", 1), aux1_global, aux2_global, aux1_local, aux2_local, caux, scale_global, slab_scale, pstream__)), 
                        "assigning variable beta");
            current_statement_begin__ = 125;
            if (as_bool(logical_gt(R_1, 1))) {
                current_statement_begin__ = 125;
                for (int r = 2; r <= R_1; ++r) {
                    current_statement_begin__ = 125;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni((r + 1)), stan::model::nil_index_list()), 
                                to_row_vector(multiply(get_base1(beta1_z, r, "beta1_z", 1), get_base1(non_sparse_sigma, (r - 1), "non_sparse_sigma", 1))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 128;
            stan::model::assign(beta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        to_row_vector(elt_multiply(minus(inflection), get_base1(beta, 2, "beta", 1))), 
                        "assigning variable beta");
            current_statement_begin__ = 131;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 131;
                stan::model::assign(y_hat, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            log_gen_inv_logit(multiply(get_base1(X, t, "X", 1), beta), get_base1(beta, 1, "beta", 1), log_y_cross, pstream__), 
                            "assigning variable y_hat");
            }
            current_statement_begin__ = 134;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 134;
                stan::model::assign(overdispersion, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            add(1, gen_inv_logit_overdispersion(add(od0, multiply(od1, get_base1(y_hat, t, "y_hat", 1))), inv(od_k), pstream__)), 
                            "assigning variable overdispersion");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 107;
            size_t beta_j_1_max__ = (R_1 + 1);
            size_t beta_j_2_max__ = G;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 108;
            size_t y_hat_k_0_max__ = T;
            size_t y_hat_j_1_max__ = G;
            for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < y_hat_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(y_hat[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: y_hat" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 109;
            size_t overdispersion_k_0_max__ = T;
            size_t overdispersion_j_1_max__ = G;
            for (size_t k_0__ = 0; k_0__ < overdispersion_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < overdispersion_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(overdispersion[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: overdispersion" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable overdispersion: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 110;
            if (stan::math::is_uninitialized(od0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: od0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable od0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 140;
            for (int r = 1; r <= R_1; ++r) {
                current_statement_begin__ = 140;
                lp_accum__.add(normal_log<propto__>(get_base1(beta1_z, r, "beta1_z", 1), 0, 1));
            }
            current_statement_begin__ = 141;
            lp_accum__.add(normal_log<propto__>(inflection, 0, 5));
            current_statement_begin__ = 142;
            lp_accum__.add(gamma_log_lpdf<propto__>(log_y_cross, (stan::math::exp(get_base1(log_y_cross_prior, 1, "log_y_cross_prior", 1)) * inv(stan::math::exp(get_base1(log_y_cross_prior, 2, "log_y_cross_prior", 1)))), inv(stan::math::exp(get_base1(log_y_cross_prior, 2, "log_y_cross_prior", 1))), pstream__));
            current_statement_begin__ = 143;
            lp_accum__.add(normal_log<propto__>(log_y_cross_prior, 0, 5));
            current_statement_begin__ = 145;
            lp_accum__.add(normal_log<propto__>(normalization, 0, 1));
            current_statement_begin__ = 146;
            lp_accum__.add(normal_log<propto__>(sum(normalization), 0, (0.01 * T)));
            current_statement_begin__ = 149;
            lp_accum__.add(normal_log<propto__>(aux1_local, 0, 1));
            current_statement_begin__ = 150;
            lp_accum__.add(inv_gamma_log<propto__>(aux2_local, (0.5 * nu_local), (0.5 * nu_local)));
            current_statement_begin__ = 156;
            if (as_bool(logical_gt(R_1, 1))) {
                current_statement_begin__ = 156;
                lp_accum__.add(normal_log<propto__>(non_sparse_sigma, 0, 1));
            }
            current_statement_begin__ = 159;
            lp_accum__.add(normal_log<propto__>(od_inflection, 0, 10));
            current_statement_begin__ = 160;
            lp_accum__.add(normal_log<propto__>(od1, 0, 1));
            current_statement_begin__ = 161;
            lp_accum__.add(normal_log<propto__>(od_k, 0, 1));
            current_statement_begin__ = 164;
            if (as_bool(logical_eq(prior_only, 0))) {
                current_statement_begin__ = 164;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 164;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(y, t, "y", 1), add(get_base1(normalization, t, "normalization", 1), get_base1(y_hat, t, "y_hat", 1)), get_base1(overdispersion, t, "overdispersion", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("inflection");
        names__.push_back("log_y_cross");
        names__.push_back("log_y_cross_prior");
        names__.push_back("beta1_z");
        names__.push_back("normalization");
        names__.push_back("od_inflection");
        names__.push_back("od1");
        names__.push_back("od_k");
        names__.push_back("aux1_local");
        names__.push_back("aux2_local");
        names__.push_back("aux1_global");
        names__.push_back("aux2_global");
        names__.push_back("caux");
        names__.push_back("non_sparse_sigma");
        names__.push_back("beta");
        names__.push_back("y_hat");
        names__.push_back("overdispersion");
        names__.push_back("od0");
        names__.push_back("y_gen");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R_1);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((R_1 - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((R_1 + 1));
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_DE_sigmoid_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, 1, Eigen::Dynamic> inflection = in__.row_vector_constrain(G);
        size_t inflection_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < inflection_j_1_max__; ++j_1__) {
            vars__.push_back(inflection(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_y_cross = in__.vector_constrain(G);
        size_t log_y_cross_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < log_y_cross_j_1_max__; ++j_1__) {
            vars__.push_back(log_y_cross(j_1__));
        }
        std::vector<double> log_y_cross_prior;
        size_t log_y_cross_prior_d_0_max__ = 2;
        log_y_cross_prior.reserve(log_y_cross_prior_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log_y_cross_prior_d_0_max__; ++d_0__) {
            log_y_cross_prior.push_back(in__.scalar_lb_constrain(0));
        }
        size_t log_y_cross_prior_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < log_y_cross_prior_k_0_max__; ++k_0__) {
            vars__.push_back(log_y_cross_prior[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta1_z;
        size_t beta1_z_d_0_max__ = R_1;
        beta1_z.reserve(beta1_z_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta1_z_d_0_max__; ++d_0__) {
            beta1_z.push_back(in__.vector_constrain(G));
        }
        size_t beta1_z_j_1_max__ = G;
        size_t beta1_z_k_0_max__ = R_1;
        for (size_t j_1__ = 0; j_1__ < beta1_z_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta1_z_k_0_max__; ++k_0__) {
                vars__.push_back(beta1_z[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> normalization = in__.vector_constrain(T);
        size_t normalization_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < normalization_j_1_max__; ++j_1__) {
            vars__.push_back(normalization(j_1__));
        }
        double od_inflection = in__.scalar_lb_constrain(0);
        vars__.push_back(od_inflection);
        double od1 = in__.scalar_lb_constrain(0);
        vars__.push_back(od1);
        double od_k = in__.scalar_lb_constrain(0);
        vars__.push_back(od_k);
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_local = in__.vector_lb_constrain(0, G);
        size_t aux1_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            vars__.push_back(aux1_local(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_local = in__.vector_lb_constrain(0, G);
        size_t aux2_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            vars__.push_back(aux2_local(j_1__));
        }
        double aux1_global = in__.scalar_lb_constrain(0);
        vars__.push_back(aux1_global);
        double aux2_global = in__.scalar_lb_constrain(0);
        vars__.push_back(aux2_global);
        double caux = in__.scalar_lb_constrain(0);
        vars__.push_back(caux);
        Eigen::Matrix<double, Eigen::Dynamic, 1> non_sparse_sigma = in__.vector_lb_constrain(0, (R_1 - 1));
        size_t non_sparse_sigma_j_1_max__ = (R_1 - 1);
        for (size_t j_1__ = 0; j_1__ < non_sparse_sigma_j_1_max__; ++j_1__) {
            vars__.push_back(non_sparse_sigma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 107;
            validate_non_negative_index("beta", "(R_1 + 1)", (R_1 + 1));
            validate_non_negative_index("beta", "G", G);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta((R_1 + 1), G);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("y_hat", "G", G);
            validate_non_negative_index("y_hat", "T", T);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > y_hat(T, Eigen::Matrix<double, Eigen::Dynamic, 1>(G));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 109;
            validate_non_negative_index("overdispersion", "G", G);
            validate_non_negative_index("overdispersion", "T", T);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > overdispersion(T, Eigen::Matrix<double, Eigen::Dynamic, 1>(G));
            stan::math::initialize(overdispersion, DUMMY_VAR__);
            stan::math::fill(overdispersion, DUMMY_VAR__);
            current_statement_begin__ = 110;
            double od0;
            (void) od0;  // dummy to suppress unused var warning
            stan::math::initialize(od0, DUMMY_VAR__);
            stan::math::fill(od0, DUMMY_VAR__);
            stan::math::assign(od0,(-(od_inflection) * od1));
            // do transformed parameters statements
            current_statement_begin__ = 113;
            stan::model::assign(beta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        to_row_vector(reg_horseshoe(get_base1(beta1_z, 1, "beta1_z", 1), aux1_global, aux2_global, aux1_local, aux2_local, caux, scale_global, slab_scale, pstream__)), 
                        "assigning variable beta");
            current_statement_begin__ = 125;
            if (as_bool(logical_gt(R_1, 1))) {
                current_statement_begin__ = 125;
                for (int r = 2; r <= R_1; ++r) {
                    current_statement_begin__ = 125;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni((r + 1)), stan::model::nil_index_list()), 
                                to_row_vector(multiply(get_base1(beta1_z, r, "beta1_z", 1), get_base1(non_sparse_sigma, (r - 1), "non_sparse_sigma", 1))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 128;
            stan::model::assign(beta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        to_row_vector(elt_multiply(minus(inflection), get_base1(beta, 2, "beta", 1))), 
                        "assigning variable beta");
            current_statement_begin__ = 131;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 131;
                stan::model::assign(y_hat, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            log_gen_inv_logit(multiply(get_base1(X, t, "X", 1), beta), get_base1(beta, 1, "beta", 1), log_y_cross, pstream__), 
                            "assigning variable y_hat");
            }
            current_statement_begin__ = 134;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 134;
                stan::model::assign(overdispersion, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            add(1, gen_inv_logit_overdispersion(add(od0, multiply(od1, get_base1(y_hat, t, "y_hat", 1))), inv(od_k), pstream__)), 
                            "assigning variable overdispersion");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_2_max__ = G;
                size_t beta_j_1_max__ = (R_1 + 1);
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                        vars__.push_back(beta(j_1__, j_2__));
                    }
                }
                size_t y_hat_j_1_max__ = G;
                size_t y_hat_k_0_max__ = T;
                for (size_t j_1__ = 0; j_1__ < y_hat_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                        vars__.push_back(y_hat[k_0__](j_1__));
                    }
                }
                size_t overdispersion_j_1_max__ = G;
                size_t overdispersion_k_0_max__ = T;
                for (size_t j_1__ = 0; j_1__ < overdispersion_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < overdispersion_k_0_max__; ++k_0__) {
                        vars__.push_back(overdispersion[k_0__](j_1__));
                    }
                }
                vars__.push_back(od0);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 169;
            validate_non_negative_index("y_gen", "T", T);
            validate_non_negative_index("y_gen", "G", G);
            std::vector<std::vector<int> > y_gen(T, std::vector<int>(G, int(0)));
            stan::math::fill(y_gen, std::numeric_limits<int>::min());
            // generated quantities statements
            current_statement_begin__ = 173;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 173;
                for (int g = 1; g <= G; ++g) {
                    current_statement_begin__ = 174;
                    stan::model::assign(y_gen, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list())), 
                                neg_binomial_2_log_rng((get_base1(normalization, t, "normalization", 1) + get_base1(get_base1(y_hat, t, "y_hat", 1), g, "y_hat", 2)), get_base1(get_base1(overdispersion, t, "overdispersion", 1), g, "overdispersion", 2), base_rng__), 
                                "assigning variable y_gen");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 169;
            size_t y_gen_k_0_max__ = T;
            size_t y_gen_k_1_max__ = G;
            for (size_t k_1__ = 0; k_1__ < y_gen_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_gen_k_0_max__; ++k_0__) {
                    vars__.push_back(y_gen[k_0__][k_1__]);
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_DE_sigmoid";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t inflection_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < inflection_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inflection" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_y_cross_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < log_y_cross_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_y_cross" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_y_cross_prior_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < log_y_cross_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_y_cross_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta1_z_j_1_max__ = G;
        size_t beta1_z_k_0_max__ = R_1;
        for (size_t j_1__ = 0; j_1__ < beta1_z_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta1_z_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta1_z" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t normalization_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < normalization_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "normalization" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "od_inflection";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "od1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "od_k";
        param_names__.push_back(param_name_stream__.str());
        size_t aux1_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux1_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux2_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "caux";
        param_names__.push_back(param_name_stream__.str());
        size_t non_sparse_sigma_j_1_max__ = (R_1 - 1);
        for (size_t j_1__ = 0; j_1__ < non_sparse_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "non_sparse_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_2_max__ = G;
            size_t beta_j_1_max__ = (R_1 + 1);
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_hat_j_1_max__ = G;
            size_t y_hat_k_0_max__ = T;
            for (size_t j_1__ = 0; j_1__ < y_hat_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t overdispersion_j_1_max__ = G;
            size_t overdispersion_k_0_max__ = T;
            for (size_t j_1__ = 0; j_1__ < overdispersion_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < overdispersion_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "overdispersion" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "od0";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t y_gen_k_0_max__ = T;
        size_t y_gen_k_1_max__ = G;
        for (size_t k_1__ = 0; k_1__ < y_gen_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < y_gen_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_gen" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t inflection_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < inflection_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inflection" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_y_cross_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < log_y_cross_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_y_cross" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_y_cross_prior_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < log_y_cross_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_y_cross_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta1_z_j_1_max__ = G;
        size_t beta1_z_k_0_max__ = R_1;
        for (size_t j_1__ = 0; j_1__ < beta1_z_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta1_z_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta1_z" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t normalization_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < normalization_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "normalization" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "od_inflection";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "od1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "od_k";
        param_names__.push_back(param_name_stream__.str());
        size_t aux1_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_local_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux1_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux2_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "caux";
        param_names__.push_back(param_name_stream__.str());
        size_t non_sparse_sigma_j_1_max__ = (R_1 - 1);
        for (size_t j_1__ = 0; j_1__ < non_sparse_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "non_sparse_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_2_max__ = G;
            size_t beta_j_1_max__ = (R_1 + 1);
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_hat_j_1_max__ = G;
            size_t y_hat_k_0_max__ = T;
            for (size_t j_1__ = 0; j_1__ < y_hat_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t overdispersion_j_1_max__ = G;
            size_t overdispersion_k_0_max__ = T;
            for (size_t j_1__ = 0; j_1__ < overdispersion_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < overdispersion_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "overdispersion" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "od0";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t y_gen_k_0_max__ = T;
        size_t y_gen_k_1_max__ = G;
        for (size_t k_1__ = 0; k_1__ < y_gen_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < y_gen_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_gen" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_DE_sigmoid_namespace::model_DE_sigmoid stan_model;
#endif
